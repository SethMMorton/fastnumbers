[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name="fastnumbers"
authors = [
    {name = "Seth M. Morton", email = "drtuba78@gmail.com"},
]
dynamic = ["version"]
requires-python = ">=3.8"
description = "Super-fast and clean conversions to numbers."
readme = "README.rst"
license = {text = "MIT"}
keywords = ["conversion", "numeric", "performance"]
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Intended Audience :: Science/Research",
	"Intended Audience :: Developers",
	"Intended Audience :: Information Technology",
	"Intended Audience :: System Administrators",
	"Intended Audience :: Financial and Insurance Industry",
	"Operating System :: OS Independent",
	"License :: OSI Approved :: MIT License",
	"Natural Language :: English",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
	"Topic :: Scientific/Engineering :: Information Analysis",
	"Topic :: Utilities",
	"Topic :: Text Processing",
	"Topic :: Text Processing :: Filters",
]

[project.optional-dependencies]
fast = ["fastnumbers >= 2.0.0"]
icu = ["PyICU >= 1.0.0"]

[project.urls]
Homepage = "https://github.com/SethMMorton/fastnumbers"
Documentation = "https://fastnumbers.readthedocs.io/"
Issues = "https://github.com/SethMMorton/fastnumbers/issues"
Changelog = "https://github.com/SethMMorton/fastnumbers/blob/main/CHANGELOG.md"

[tool.setuptools_scm]
version_file = "src/fastnumbers/_version.py"

[tool.mypy]
mypy_path = "mypy_stubs"
plugins = "numpy.typing.mypy_plugin"

[tool.pytest.ini_options]
addopts = "--tb=short"

[tool.ruff]
target-version = "py38"
extend-exclude = ["build", "dist", "docs", "_version.py"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
fixable = ["ALL"]
select = ["ALL"]
ignore = [
	"RUF001",  # ambiguous-unicode-character-string
	"RUF012",  # mutable class variables need annotation
	"COM812",  # missing trailing comma
	"ISC001",  # single line implicit string concatenation
	"PT011",   # pytest.raises without match
	"PYI001",  # prefix private types with '_'
	"DTZ",     # flaek8-datetimez
	"D203",    # one blank line before docstring in class
	"D212",    # docstring on same line as quotes
]
# doctests = true  # enable when/if available

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
	"PLC0414",  # useless import alias
        "A004",     # shadowing builtin
]
"fastnumbers.pyi" = [
	"A001",     # shadowing a builtin
	"ANN401",   # Any type disallowed
	"PLR0913",  # too many arguments in function definition
]
"tests/**.py" = [
	"S101",     # use of assert
	"S110",     # log a try/except/pass
	"S311",     # pseudo-random
	"D",        # docstring checks
	"INP",      # implicit namespace package
	"PLR2004",  # magic value comparison
	"PERF",     # performance checks
        "A004",     # shadowing builtin
]
"tests/builtin_support.py" = [
	"ANN401",   # Any type disallowed
]
"tests/test_builtin*.py" = [
	"PT027",    # unittest-style assert
	"PT009",    # unittest-style assert
	"PT017",    # use pytest.raises
	"PLR0915",  # too many statements
]
"tests/test_fastnumbers.py" = [
	"ANN401",   # Any type disallowed
	"ANN002",   # need type annotation for *args
	"ANN003",   # need type annotation for **kwargs
	"PLR0913",  # too many arguments in function definition
	"PIE794",   # class filed defined multiple times
	"PLR0124",  # name compared with itself (used to check for NaN)
]
"tests/test_fastnumbers_examples.py" = [
	"PLR0915",  # too many statements
]
"dev/**.py" = [
	"S603",  # subprocess call of untrusted input
	"S606",  # start process without a shell
	"S607",  # executable with partial path
]
"dev/bump.py" = [
	"T201",  # print found
]
"profiling/profile.py" = [
	"ANN",   # annotations
	"T201",  # print found
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-local-folder = ["builtin_grammar", "builtin_support"]
